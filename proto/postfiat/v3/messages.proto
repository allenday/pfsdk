syntax = "proto3";

package postfiat.v3;

import "a2a/v1/a2a.proto";
import "google/protobuf/empty.proto";
import "google/api/annotations.proto";

option go_package = "postfiat/v3;postfiatv3";
option java_package = "com.postfiat.v3";
option java_multiple_files = true;
option csharp_namespace = "PostFiat.V3";

// Top-level envelope - stored unencrypted in XRPL memo
message Envelope {
  uint32 version = 1;
  bytes content_hash = 2;
  MessageType message_type = 3;
  EncryptionMode encryption = 4;
  string reply_to = 5;

  // Public references, visible for discovery. These have no key material.
  repeated ContextReference public_references = 6;

  // Encrypted key material required to decrypt the main message payload
  // and any private context references it contains.
  repeated AccessGrant access_grants = 7;

  // Actual message content (may be encrypted based on encryption mode)
  bytes message = 8;

  map<string, string> metadata = 9;
}

// A reference to another piece of content. It contains no key material.
// It links content to an access control group.
message ContextReference {
  // Content hash of the referenced document.
  bytes content_hash = 1;

  // Identifier for the access control group this content belongs to.
  // Tells the client which group_key is needed to decrypt this content's CEK.
  string group_id = 2;
}

// The type of key being granted in an AccessGrant.
enum KeyType {
  RESERVED = 0;
  // The encrypted_key_material contains a Content Encryption Key (CEK),
  // itself encrypted by a group_key.
  CONTENT_KEY = 1;
  // The encrypted_key_material contains a Group Key,
  // itself encrypted by a user's public key.
  GROUP_KEY = 2;
}

// Message to handle all key distribution.
// This separates access control from the data structure.
message AccessGrant {
  KeyType key_type = 1;

  // For CONTENT_KEY, this is the hash of the content it decrypts.
  // For GROUP_KEY, this is the ID of the group the key belongs to.
  string target_id = 2;

  // The actual encrypted key material (a CEK or a Group Key).
  bytes encrypted_key_material = 3;
}

// Core message for agent-to-agent communication.
// This message is what gets encrypted and placed in Envelope.message.
message CoreMessage {
  string content = 1;

  // Private context references, revealed only after decrypting this CoreMessage.
  repeated ContextReference context_references = 2;

  map<string, string> metadata = 3;
}

// Multi-part message part for large content. Unchanged.
message MultiPartMessagePart {
  string message_id = 1;
  uint32 part_number = 2;
  uint32 total_parts = 3;
  bytes content = 4;
  string complete_message_hash = 5;
}

// Supported message types. Unchanged.
enum MessageType {
  CORE_MESSAGE = 0;
  MULTIPART_MESSAGE_PART = 1;
  RESERVED_100 = 100;
}

// Encryption modes supported. Unchanged.
enum EncryptionMode {
  NONE = 0;
  PROTECTED = 1;
  PUBLIC_KEY = 2;
}

// A2A Integration messages are structurally sound and do not require changes.
// Their behavior is determined by how the above messages are used.
message PostFiatAgentCapabilities {
  // Supports PostFiat envelope processing
  bool envelope_processing = 1;

  // Supports ledger persistence
  bool ledger_persistence = 2;

  // Supports selective disclosure context DAG traversal
  bool context_dag_traversal = 3;

  // Maximum context DAG depth supported
  uint32 max_context_depth = 4;

  // Supported encryption modes
  repeated EncryptionMode supported_encryption_modes = 5;

  // The user's public key for encryption (e.g., a Curve25519 key for libsodium).
  // This is the key others will use to encrypt messages and group_keys for this user.
  bytes public_encryption_key = 6;

  // The algorithm used for the public_encryption_key.
  // E.g., "curve25519"
  string public_key_algorithm = 7;

  // A list of URIs defining the semantic tasks or services this agent offers.
  // Example: "https://schemas.postfiat.org/tasks/text-summarization/v1"
  repeated string supported_semantic_capabilities = 8;
}

// Content descriptor for external content storage
message ContentDescriptor {
  // Full URI including scheme: "ipfs://QmXxx", "https://...", "arweave://..."
  string uri = 1;
  
  // MIME type: "text/plain; charset=utf-8", "application/json", etc.
  string content_type = 2;
  
  // Content size in bytes
  int64 content_length = 3;
  
  // Optional content encoding: "gzip", "br", etc.
  string content_encoding = 4;
  
  // Optional integrity check (e.g., SHA-256 hash)
  bytes content_hash = 5;
  
  // Additional metadata specific to the content
  map<string, string> metadata = 6;
}

message PostFiatEnvelopePayload {
  Envelope envelope = 1;
  
  // Content descriptor for external content (replaces content_address)
  ContentDescriptor content = 2;
  
  map<string, string> postfiat_metadata = 3;
}

message PostFiatA2AMessage {
  a2a.v1.Message a2a_message = 1;
  PostFiatEnvelopePayload postfiat_payload = 2;
  map<string, string> integration_metadata = 3;
}

// ============================================================================
// PostFiat Storage Services
// ============================================================================

// PostFiat Agent Registry Service
service PostFiatAgentRegistryService {
  // Get agent card (A2A compliant)
  rpc GetAgentCard(GetAgentCardRequest) returns (GetAgentCardResponse) {
    option (google.api.http) = {
      get: "/v3/agents/card"
    };
  }
  
  // Store agent card with PostFiat capabilities
  rpc StoreAgentCard(StoreAgentCardRequest) returns (StoreAgentCardResponse) {
    option (google.api.http) = {
      post: "/v3/agents"
      body: "*"
    };
  }
  
  // Search agents by capabilities, name, etc.
  rpc SearchAgents(SearchAgentsRequest) returns (SearchAgentsResponse) {
    option (google.api.http) = {
      get: "/v3/agents/search"
    };
  }
  
  // Delete agent card
  rpc DeleteAgentCard(DeleteAgentCardRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v3/agents/{agent_id}"
    };
  }
  
  // Get agent by envelope sender
  rpc GetAgentByEnvelope(GetAgentByEnvelopeRequest) returns (GetAgentByEnvelopeResponse) {
    option (google.api.http) = {
      post: "/v3/agents/by-envelope"
      body: "*"
    };
  }
}

// PostFiat Content Storage Service
service PostFiatContentStorageService {
  // Store content and return descriptor
  rpc StoreContent(StoreContentRequest) returns (StoreContentResponse) {
    option (google.api.http) = {
      post: "/v3/content"
      body: "*"
    };
  }
  
  // Retrieve content by descriptor
  rpc RetrieveContent(RetrieveContentRequest) returns (RetrieveContentResponse) {
    option (google.api.http) = {
      post: "/v3/content/retrieve"
      body: "*"
    };
  }
  
  // Delete content
  rpc DeleteContent(DeleteContentRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v3/content/{content_id}"
    };
  }
  
  // Check if storage can handle URI
  rpc CanHandleUri(CanHandleUriRequest) returns (CanHandleUriResponse) {
    option (google.api.http) = {
      get: "/v3/content/can-handle"
    };
  }
}

// PostFiat Envelope Storage Service
service PostFiatEnvelopeStorageService {
  // Store envelope
  rpc StoreEnvelope(StoreEnvelopeRequest) returns (StoreEnvelopeResponse) {
    option (google.api.http) = {
      post: "/v3/envelopes"
      body: "*"
    };
  }
  
  // Retrieve envelope by ID
  rpc RetrieveEnvelope(RetrieveEnvelopeRequest) returns (RetrieveEnvelopeResponse) {
    option (google.api.http) = {
      get: "/v3/envelopes/{envelope_id}"
    };
  }
  
  // Search envelopes
  rpc SearchEnvelopes(SearchEnvelopesRequest) returns (SearchEnvelopesResponse) {
    option (google.api.http) = {
      get: "/v3/envelopes/search"
    };
  }
  
  // Delete envelope
  rpc DeleteEnvelope(DeleteEnvelopeRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v3/envelopes/{envelope_id}"
    };
  }
  
  // Check if envelope exists
  rpc EnvelopeExists(EnvelopeExistsRequest) returns (EnvelopeExistsResponse) {
    option (google.api.http) = {
      get: "/v3/envelopes/{envelope_id}/exists"
    };
  }
  
  // Find envelopes by content hash
  rpc FindEnvelopesByContentHash(FindEnvelopesByContentHashRequest) 
      returns (FindEnvelopesByContentHashResponse) {
    option (google.api.http) = {
      get: "/v3/envelopes/by-content-hash/{content_hash}"
    };
  }
  
  // Find envelopes by context
  rpc FindEnvelopesByContext(FindEnvelopesByContextRequest) 
      returns (FindEnvelopesByContextResponse) {
    option (google.api.http) = {
      get: "/v3/envelopes/by-context/{context_hash}"
    };
  }
  
  // List envelopes by sender
  rpc ListEnvelopesBySender(ListEnvelopesBySenderRequest) 
      returns (ListEnvelopesBySenderResponse) {
    option (google.api.http) = {
      get: "/v3/envelopes/by-sender/{sender}"
    };
  }
}

// ============================================================================
// Request/Response Messages
// ============================================================================

// Agent Registry Messages
message StoreAgentCardRequest {
  a2a.v1.AgentCard agent_card = 1;
  PostFiatAgentCapabilities postfiat_capabilities = 2;
  string agent_id = 3;  // Optional - if not provided, will be generated
}

message SearchAgentsRequest {
  string query = 1;  // Search query
  repeated string capabilities = 2;  // Filter by capabilities
  string organization = 3;  // Filter by organization
  int32 limit = 4;  // Maximum results
  int32 offset = 5;  // Pagination offset
}

message SearchAgentsResponse {
  repeated AgentSearchResult results = 1;
  int32 total_count = 2;
}

message AgentSearchResult {
  string agent_id = 1;
  a2a.v1.AgentCard agent_card = 2;
  PostFiatAgentCapabilities postfiat_capabilities = 3;
  float relevance_score = 4;
}

message DeleteAgentCardRequest {
  string agent_id = 1;
}

message GetAgentByEnvelopeRequest {
  Envelope envelope = 1;
}

// Content Storage Messages
message StoreContentRequest {
  bytes content = 1;
  string content_type = 2;
  string preferred_storage = 3;  // "redis", "ipfs", "inline", etc.
}

message RetrieveContentRequest {
  ContentDescriptor descriptor = 1;
}

message DeleteContentRequest {
  string content_id = 1;
}

message CanHandleUriRequest {
  string uri = 1;
}

message CanHandleUriResponse {
  bool can_handle = 1;
  string storage_provider = 2;
}

// Envelope Storage Messages
message StoreEnvelopeRequest {
  Envelope envelope = 1;
  string preferred_storage = 2;  // "redis", "evm", "xrpl", etc.
}

message StoreEnvelopeResponse {
  string envelope_id = 1;
  string storage_backend = 2;
  map<string, string> metadata = 3;
}

message RetrieveEnvelopeRequest {
  string envelope_id = 1;
}

message SearchEnvelopesRequest {
  string query = 1;
  MessageType message_type = 2;
  EncryptionMode encryption_mode = 3;
  string sender = 4;
  int64 start_time = 5;
  int64 end_time = 6;
  int32 limit = 7;
  int32 offset = 8;
}

message SearchEnvelopesResponse {
  repeated EnvelopeSearchResult results = 1;
  int32 total_count = 2;
}

message EnvelopeSearchResult {
  string envelope_id = 1;
  Envelope envelope = 2;
  string storage_backend = 3;
  float relevance_score = 4;
}

message DeleteEnvelopeRequest {
  string envelope_id = 1;
}

message EnvelopeExistsRequest {
  string envelope_id = 1;
}

message EnvelopeExistsResponse {
  bool exists = 1;
  string storage_backend = 2;
}

message FindEnvelopesByContentHashRequest {
  string content_hash = 1;
  int32 limit = 2;
}

message FindEnvelopesByContentHashResponse {
  repeated Envelope envelopes = 1;
}

message FindEnvelopesByContextRequest {
  string context_hash = 1;
  int32 limit = 2;
}

message FindEnvelopesByContextResponse {
  repeated Envelope envelopes = 1;
}

message ListEnvelopesBySenderRequest {
  string sender = 1;
  int32 limit = 2;
  int32 offset = 3;
}

message ListEnvelopesBySenderResponse {
  repeated Envelope envelopes = 1;
  int32 total_count = 2;
}

// Request/Response message types for proper gRPC service compliance
message GetAgentCardRequest {
  string agent_id = 1;
}

message GetAgentCardResponse {
  a2a.v1.AgentCard agent_card = 1;
}

message StoreAgentCardResponse {
  a2a.v1.AgentCard agent_card = 1;
}

message GetAgentByEnvelopeResponse {
  a2a.v1.AgentCard agent_card = 1;
}

message StoreContentResponse {
  ContentDescriptor descriptor = 1;
}

message RetrieveContentResponse {
  bytes content = 1;
  string content_type = 2;
  int64 content_length = 3;
}

message RetrieveEnvelopeResponse {
  Envelope envelope = 1;
}