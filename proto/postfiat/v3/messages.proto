syntax = "proto3";

package postfiat.v3;

import "a2a/v1/a2a.proto";

option go_package = "postfiat/v3;postfiatv3";
option java_package = "com.postfiat.v3";
option java_multiple_files = true;
option csharp_namespace = "PostFiat.V3";

// Top-level envelope - stored unencrypted in XRPL memo
message Envelope {
  uint32 version = 1;
  bytes content_hash = 2;
  MessageType message_type = 3;
  EncryptionMode encryption = 4;
  string reply_to = 5;

  // Public references, visible for discovery. These have no key material.
  repeated ContextReference public_references = 6;

  // Encrypted key material required to decrypt the main message payload
  // and any private context references it contains.
  repeated AccessGrant access_grants = 7;

  // Actual message content (may be encrypted based on encryption mode)
  bytes message = 8;

  map<string, string> metadata = 9;
}

// A reference to another piece of content. It contains no key material.
// It links content to an access control group.
message ContextReference {
  // Content hash of the referenced document.
  bytes content_hash = 1;

  // Identifier for the access control group this content belongs to.
  // Tells the client which group_key is needed to decrypt this content's CEK.
  string group_id = 2;
}

// The type of key being granted in an AccessGrant.
enum KeyType {
  RESERVED = 0;
  // The encrypted_key_material contains a Content Encryption Key (CEK),
  // itself encrypted by a group_key.
  CONTENT_KEY = 1;
  // The encrypted_key_material contains a Group Key,
  // itself encrypted by a user's public key.
  GROUP_KEY = 2;
}

// Message to handle all key distribution.
// This separates access control from the data structure.
message AccessGrant {
  KeyType key_type = 1;

  // For CONTENT_KEY, this is the hash of the content it decrypts.
  // For GROUP_KEY, this is the ID of the group the key belongs to.
  string target_id = 2;

  // The actual encrypted key material (a CEK or a Group Key).
  bytes encrypted_key_material = 3;
}

// Core message for agent-to-agent communication.
// This message is what gets encrypted and placed in Envelope.message.
message CoreMessage {
  string content = 1;

  // Private context references, revealed only after decrypting this CoreMessage.
  repeated ContextReference context_references = 2;

  map<string, string> metadata = 3;
}

// Multi-part message part for large content. Unchanged.
message MultiPartMessagePart {
  string message_id = 1;
  uint32 part_number = 2;
  uint32 total_parts = 3;
  bytes content = 4;
  string complete_message_hash = 5;
}

// Supported message types. Unchanged.
enum MessageType {
  CORE_MESSAGE = 0;
  MULTIPART_MESSAGE_PART = 1;
  RESERVED_100 = 100;
}

// Encryption modes supported. Unchanged.
enum EncryptionMode {
  NONE = 0;
  PROTECTED = 1;
  PUBLIC_KEY = 2;
}

// A2A Integration messages are structurally sound and do not require changes.
// Their behavior is determined by how the above messages are used.
message PostFiatAgentCapabilities {
  // Supports PostFiat envelope processing
  bool envelope_processing = 1;

  // Supports ledger persistence
  bool ledger_persistence = 2;

  // Supports selective disclosure context DAG traversal
  bool context_dag_traversal = 3;

  // Maximum context DAG depth supported
  uint32 max_context_depth = 4;

  // Supported encryption modes
  repeated EncryptionMode supported_encryption_modes = 5;

  // ADDED: The user's public key for encryption (e.g., a Curve25519 key for libsodium).
  // This is the key others will use to encrypt messages and group_keys for this user.
  bytes public_encryption_key = 6;

  // ADDED: The algorithm used for the public_encryption_key.
  // E.g., "curve25519"
  string public_key_algorithm = 7;
}

message PostFiatEnvelopePayload {
  Envelope envelope = 1;
  string xrpl_transaction_hash = 2;
  string content_address = 3;
  map<string, string> postfiat_metadata = 4;
}

message PostFiatA2AMessage {
  a2a.v1.Message a2a_message = 1;
  PostFiatEnvelopePayload postfiat_payload = 2;
  map<string, string> integration_metadata = 3;
}